using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace AQASkeletronPlus
{
    public partial class SettingsMenu : Form
    {
        //INI keypairs for all the settings.
        const string STARTINGREP_KEY = "StartingReputation", DAILYCOST_KEY = "DailyCost", FUELCOST_KEY = "FuelCostPerTile", BASECOST_KEY = "BaseCostForDelivery";
        private static bool changesMade = false;

        public SettingsMenu()
        {
            //If there have been changes made previously, don't allow opening the settings menu.
            if (changesMade)
            {
                MessageBox.Show("Settings have been altered previously, you will have to restart the program to apply before configuring again.");
                this.Close();
                return;
            }

            InitializeComponent();
            this.Show();

            //Grab all the settings values and put them in the correct boxes.
            startingRepBox.Value = Settings.Get.StartingReputation;
            dailyCostBox.Value = Settings.Get.StartingDailyCost;
            fuelCostBox.Value = Convert.ToDecimal(Settings.Get.FuelCostPerTile);
            baseDeliveryCostBox.Value = Convert.ToDecimal(Settings.Get.BaseCostForDelivery);
        }

        private void docsLinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Process.Start("https://c272.github.io/skeletron");
        }

        /// <summary>
        /// Triggered when the "OK" button is clicked.
        /// </summary>
        private void okButton_Click(object sender, EventArgs e)
        {
            Dictionary<string, string> iniKeyPairs = new Dictionary<string, string>();

            //Does an INI file already exist? If so, parse it in.
            if (File.Exists("settings.ini"))
            {
                List<string[]> lines = new List<string[]>();
                foreach (var line in File.ReadAllText("settings.ini").Replace("\r", "").Split('\n'))
                {
                    //Check that the line is a key value pair.
                    if (line.Length > 0 && Regex.IsMatch(line[0].ToString(), "[A-Za-z]") && line.Contains("="))
                    {
                        //It is! add.
                        lines.Add(line.Split('='));
                    }
                }

                //For every line, check it's a valid key value pair and add.
                foreach (var lineParts in lines)
                {
                    //Only take the first two parts.
                    if (lineParts.Length < 2) { continue; }

                    //Key been added already?
                    if (iniKeyPairs.Keys.Contains(lineParts[0])) { continue; }

                    //Nope, good to go.
                    iniKeyPairs.Add(lineParts[0], lineParts[1]);
                }
            }

            //Wipe any existing keypairs for the four settings properties.
            iniKeyPairs.Remove(STARTINGREP_KEY);
            iniKeyPairs.Remove(DAILYCOST_KEY);
            iniKeyPairs.Remove(FUELCOST_KEY);
            iniKeyPairs.Remove(BASECOST_KEY);

            //Add the newly configured ones.
            iniKeyPairs.Add(STARTINGREP_KEY, startingRepBox.Value.ToString());
            iniKeyPairs.Add(DAILYCOST_KEY, dailyCostBox.Value.ToString());
            iniKeyPairs.Add(FUELCOST_KEY, fuelCostBox.Value.ToString());
            iniKeyPairs.Add(BASECOST_KEY, baseDeliveryCostBox.Value.ToString());

            //Construct the INI string.
            string settingsText = "; This configuration file was automatically generated by AQA Skeletron+.\r\n";
            foreach (var kp in iniKeyPairs)
            {
                settingsText += kp.Key + "=" + kp.Value + "\r\n";
            }
            settingsText.Trim('\r', '\n');

            //Write to file.
            File.WriteAllText("settings.ini", settingsText);

            //Display a message that they'll need to restart to apply changes.
            MessageBox.Show("Settings saved. You will need to restart the emulator to see your changes.");
            changesMade = true;
        }
    }
}
